import { InstanceDto } from '../dto/instance.dto';
import { TypebotDto } from '../dto/typebot.dto';
import { TypebotService } from '../services/typebot.service';
export declare class TypebotController {
    private readonly typebotService;
    constructor(typebotService: TypebotService);
    createTypebot(instance: InstanceDto, data: TypebotDto): Promise<{
        typebot: {
            typebot: TypebotDto;
            instanceName: string;
            qrcode?: boolean;
            number?: string;
            token?: string;
            webhook?: string;
            webhook_by_events?: boolean;
            events?: string[];
            reject_call?: boolean;
            msg_call?: string;
            groups_ignore?: boolean;
            always_online?: boolean;
            read_messages?: boolean;
            read_status?: boolean;
            chatwoot_account_id?: string;
            chatwoot_token?: string;
            chatwoot_url?: string;
            chatwoot_sign_msg?: boolean;
            chatwoot_reopen_conversation?: boolean;
            chatwoot_conversation_pending?: boolean;
            websocket_enabled?: boolean;
            websocket_events?: string[];
            rabbitmq_enabled?: boolean;
            rabbitmq_events?: string[];
            typebot_url?: string;
            typebot_expire?: number;
            typebot_keyword_finish?: string;
            typebot_delay_message?: number;
            typebot_unknown_message?: string;
            proxy_enabled?: boolean;
            proxy_proxy?: string;
        };
    }>;
    findTypebot(instance: InstanceDto): Promise<TypebotDto>;
    changeStatus(instance: InstanceDto, data: any): Promise<{
        typebot: {
            typebot: {
                enabled: boolean;
                url: string;
                typebot: string;
                expire: number;
                keyword_finish: string;
                delay_message: number;
                unknown_message: string;
                sessions: import("../dto/typebot.dto").Session[];
            };
            instanceName: string;
            qrcode?: boolean;
            number?: string;
            token?: string;
            webhook?: string;
            webhook_by_events?: boolean;
            events?: string[];
            reject_call?: boolean;
            msg_call?: string;
            groups_ignore?: boolean;
            always_online?: boolean;
            read_messages?: boolean;
            read_status?: boolean;
            chatwoot_account_id?: string;
            chatwoot_token?: string;
            chatwoot_url?: string;
            chatwoot_sign_msg?: boolean;
            chatwoot_reopen_conversation?: boolean;
            chatwoot_conversation_pending?: boolean;
            websocket_enabled?: boolean;
            websocket_events?: string[];
            rabbitmq_enabled?: boolean;
            rabbitmq_events?: string[];
            typebot_url?: string;
            typebot_expire?: number;
            typebot_keyword_finish?: string;
            typebot_delay_message?: number;
            typebot_unknown_message?: string;
            proxy_enabled?: boolean;
            proxy_proxy?: string;
        };
    }>;
    startTypebot(instance: InstanceDto, data: any): Promise<{
        typebot: {
            typebot: {
                url: any;
                remoteJid: any;
                typebot: any;
            };
            instanceName: string;
            qrcode?: boolean;
            number?: string;
            token?: string;
            webhook?: string;
            webhook_by_events?: boolean;
            events?: string[];
            reject_call?: boolean;
            msg_call?: string;
            groups_ignore?: boolean;
            always_online?: boolean;
            read_messages?: boolean;
            read_status?: boolean;
            chatwoot_account_id?: string;
            chatwoot_token?: string;
            chatwoot_url?: string;
            chatwoot_sign_msg?: boolean;
            chatwoot_reopen_conversation?: boolean;
            chatwoot_conversation_pending?: boolean;
            websocket_enabled?: boolean;
            websocket_events?: string[];
            rabbitmq_enabled?: boolean;
            rabbitmq_events?: string[];
            typebot_url?: string;
            typebot_expire?: number;
            typebot_keyword_finish?: string;
            typebot_delay_message?: number;
            typebot_unknown_message?: string;
            proxy_enabled?: boolean;
            proxy_proxy?: string;
        };
    }>;
}
