"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.groupController = exports.chatController = exports.sendMessageController = exports.viewsController = exports.instanceController = exports.settingsController = exports.chatwootController = exports.rabbitmqController = exports.proxyController = exports.websocketController = exports.webhookController = exports.typebotController = exports.waMonitor = exports.cache = exports.repository = void 0;
const env_config_1 = require("../config/env.config");
const event_config_1 = require("../config/event.config");
const logger_config_1 = require("../config/logger.config");
const db_connect_1 = require("../libs/db.connect");
const redis_client_1 = require("../libs/redis.client");
const chat_controller_1 = require("./controllers/chat.controller");
const chatwoot_controller_1 = require("./controllers/chatwoot.controller");
const group_controller_1 = require("./controllers/group.controller");
const instance_controller_1 = require("./controllers/instance.controller");
const proxy_controller_1 = require("./controllers/proxy.controller");
const rabbitmq_controller_1 = require("./controllers/rabbitmq.controller");
const sendMessage_controller_1 = require("./controllers/sendMessage.controller");
const settings_controller_1 = require("./controllers/settings.controller");
const typebot_controller_1 = require("./controllers/typebot.controller");
const views_controller_1 = require("./controllers/views.controller");
const webhook_controller_1 = require("./controllers/webhook.controller");
const websocket_controller_1 = require("./controllers/websocket.controller");
const models_1 = require("./models");
const auth_repository_1 = require("./repository/auth.repository");
const chat_repository_1 = require("./repository/chat.repository");
const chatwoot_repository_1 = require("./repository/chatwoot.repository");
const contact_repository_1 = require("./repository/contact.repository");
const message_repository_1 = require("./repository/message.repository");
const messageUp_repository_1 = require("./repository/messageUp.repository");
const proxy_repository_1 = require("./repository/proxy.repository");
const rabbitmq_repository_1 = require("./repository/rabbitmq.repository");
const repository_manager_1 = require("./repository/repository.manager");
const settings_repository_1 = require("./repository/settings.repository");
const typebot_repository_1 = require("./repository/typebot.repository");
const webhook_repository_1 = require("./repository/webhook.repository");
const websocket_repository_1 = require("./repository/websocket.repository");
const auth_service_1 = require("./services/auth.service");
const chatwoot_service_1 = require("./services/chatwoot.service");
const monitor_service_1 = require("./services/monitor.service");
const proxy_service_1 = require("./services/proxy.service");
const rabbitmq_service_1 = require("./services/rabbitmq.service");
const settings_service_1 = require("./services/settings.service");
const typebot_service_1 = require("./services/typebot.service");
const webhook_service_1 = require("./services/webhook.service");
const websocket_service_1 = require("./services/websocket.service");
const logger = new logger_config_1.Logger('WA MODULE');
const messageRepository = new message_repository_1.MessageRepository(models_1.MessageModel, env_config_1.configService);
const chatRepository = new chat_repository_1.ChatRepository(models_1.ChatModel, env_config_1.configService);
const contactRepository = new contact_repository_1.ContactRepository(models_1.ContactModel, env_config_1.configService);
const messageUpdateRepository = new messageUp_repository_1.MessageUpRepository(models_1.MessageUpModel, env_config_1.configService);
const typebotRepository = new typebot_repository_1.TypebotRepository(models_1.TypebotModel, env_config_1.configService);
const webhookRepository = new webhook_repository_1.WebhookRepository(models_1.WebhookModel, env_config_1.configService);
const websocketRepository = new websocket_repository_1.WebsocketRepository(models_1.WebsocketModel, env_config_1.configService);
const proxyRepository = new proxy_repository_1.ProxyRepository(models_1.ProxyModel, env_config_1.configService);
const rabbitmqRepository = new rabbitmq_repository_1.RabbitmqRepository(models_1.RabbitmqModel, env_config_1.configService);
const chatwootRepository = new chatwoot_repository_1.ChatwootRepository(models_1.ChatwootModel, env_config_1.configService);
const settingsRepository = new settings_repository_1.SettingsRepository(models_1.SettingsModel, env_config_1.configService);
const authRepository = new auth_repository_1.AuthRepository(models_1.AuthModel, env_config_1.configService);
exports.repository = new repository_manager_1.RepositoryBroker(messageRepository, chatRepository, contactRepository, messageUpdateRepository, webhookRepository, chatwootRepository, settingsRepository, websocketRepository, rabbitmqRepository, typebotRepository, proxyRepository, authRepository, env_config_1.configService, db_connect_1.dbserver === null || db_connect_1.dbserver === void 0 ? void 0 : db_connect_1.dbserver.getClient());
exports.cache = new redis_client_1.RedisCache();
exports.waMonitor = new monitor_service_1.WAMonitoringService(event_config_1.eventEmitter, env_config_1.configService, exports.repository, exports.cache);
const authService = new auth_service_1.AuthService(env_config_1.configService, exports.waMonitor, exports.repository);
const typebotService = new typebot_service_1.TypebotService(exports.waMonitor);
exports.typebotController = new typebot_controller_1.TypebotController(typebotService);
const webhookService = new webhook_service_1.WebhookService(exports.waMonitor);
exports.webhookController = new webhook_controller_1.WebhookController(webhookService);
const websocketService = new websocket_service_1.WebsocketService(exports.waMonitor);
exports.websocketController = new websocket_controller_1.WebsocketController(websocketService);
const proxyService = new proxy_service_1.ProxyService(exports.waMonitor);
exports.proxyController = new proxy_controller_1.ProxyController(proxyService);
const rabbitmqService = new rabbitmq_service_1.RabbitmqService(exports.waMonitor);
exports.rabbitmqController = new rabbitmq_controller_1.RabbitmqController(rabbitmqService);
const chatwootService = new chatwoot_service_1.ChatwootService(exports.waMonitor, env_config_1.configService);
exports.chatwootController = new chatwoot_controller_1.ChatwootController(chatwootService, env_config_1.configService);
const settingsService = new settings_service_1.SettingsService(exports.waMonitor);
exports.settingsController = new settings_controller_1.SettingsController(settingsService);
exports.instanceController = new instance_controller_1.InstanceController(exports.waMonitor, env_config_1.configService, exports.repository, event_config_1.eventEmitter, authService, webhookService, chatwootService, settingsService, websocketService, rabbitmqService, typebotService, exports.cache);
exports.viewsController = new views_controller_1.ViewsController(exports.waMonitor, env_config_1.configService);
exports.sendMessageController = new sendMessage_controller_1.SendMessageController(exports.waMonitor);
exports.chatController = new chat_controller_1.ChatController(exports.waMonitor);
exports.groupController = new group_controller_1.GroupController(exports.waMonitor);
logger.info('Module - ON');
